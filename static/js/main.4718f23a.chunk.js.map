{"version":3,"sources":["api/api.js","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","components/LoadingError/LoadingError.jsx","App.jsx","index.js"],"names":["request","url","options","fetch","then","response","ok","json","Error","status","statusText","result","data","getUser","selectedUserId","TodoItem","todo","selectUser","styles","id","getSelectedId","userId","itemStyles","completed","className","type","readOnly","title","onClick","TodoList","state","query","option","handleChange","event","target","name","value","setState","this","props","todos","currentTodos","filter","toLowerCase","includes","onChange","placeholder","map","key","React","Component","CurrentUser","user","a","prevProps","prevState","deleteUser","email","phone","LoadingError","App","selectedStatus","hasLoadingError","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4718f23a.chunk.js","sourcesContent":["/* eslint-disable no-multiple-empty-lines */\nconst TODO_API_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url, options) => fetch(`${TODO_API_URL}${url}`, options)\n  .then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error(`${response.status} - ${response.statusText}`);\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getUsers = () => request('/users');\nexport const getUser = selectedUserId => request(`/users/${selectedUserId}`);\n","/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, selectUser, selectedUserId }) => {\n  const styles = selectedUserId === todo.id ? 'button is-link' : 'button is-info is-outlined';\n  const getSelectedId = selectedUserId === todo.id ? 0 : todo.userId;\n  const itemStyles = `TodoList__item ${todo.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked' }`;\n\n  return (\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        <li className={itemStyles}>\n          <label>\n            <input\n              className={itemStyles}\n              type=\"checkbox\" readOnly />\n            <p>{todo.title}</p>\n          </label>\n            <button\n              onClick={() => selectUser(getSelectedId)}\n              className={styles}\n              type=\"button\">\n              User: {todo.userId}\n            </button>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nTodoItem.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    option: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, selectUser, selectedUserId } = this.props;\n    const { query, option } = this.state;\n\n    const currentTodos = todos\n      .filter(todo => todo.userId !== null && todo.title !== '')\n      .filter((todo) => {\n        if (query) {\n          return (\n            todo.title.toLowerCase().includes(query.toLowerCase())\n          );\n        }\n\n        return todo;\n      })\n      .filter((todo) => {\n        if (option === 'active') {\n          return !todo.completed;\n        }\n\n        if (option === 'completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n\n        <input\n          type=\"text\"\n          className=\"input is-rounded\"\n          name=\"query\"\n          value={this.state.query}\n          onChange={this.handleChange}\n          placeholder=\"Primary input\"\n        />\n\n        <div className=\"select\">\n          <select\n            name=\"option\"\n            value={this.state.option}\n            onChange={this.handleChange}\n          >\n            <option value=\"\">take a choose</option>\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n\n        <h2>Todos:</h2>\n        {currentTodos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            selectUser={selectUser}\n            selectedUserId={selectedUserId}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","/* eslint-disable */\nimport React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.getUser();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser = async () => {\n    const user = await getUser(this.props.userId);\n    this.setState({ user })\n  }\n\n  render() {\n    const { deleteUser } = this.props;\n    const { user } = this.state;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n            Selected user:\n            {this.props.userId}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          {/*{ optional chaining ' ?.  ' }*/}\n        </div>\n        <button\n          onClick={deleteUser}\n          type=\"button\"\n          className=\"button is-link\"\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './LoadingError.css';\n\nexport const LoadingError = () => (\n  <div className=\"block\">\n    An error occurred when\n    <strong>loading</strong>\n    todos...\n  </div>\n);\n","/* eslint-disable */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bulma/css/bulma.css';\nimport classnames from 'classnames';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { LoadingError } from './components/LoadingError/LoadingError';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedStatus: '',\n  };\n\n  async componentDidMount() {\n      try {\n        const todos = await getTodos();\n\n        this.setState({\n          todos: todos.filter(todo => todo.userId !== null && todo.title !== ''),\n        });\n      } catch (error) {\n        this.setState({\n          hasLoadingError: true,\n        });\n      }\n  }\n\n  deleteUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n\n    console.log(this.state.todos);\n    const { todos, selectedUserId, hasLoadingError } = this.state;\n    return (\n      <>\n        <div className=\"App\">\n          <div className=\"App__sidebar\">\n\n            <TodoList\n              todos={todos}\n              selectedUserId={selectedUserId}\n              selectUser={(selectedUserId) => {\n                this.setState({ selectedUserId });\n              }}\n            />\n\n          </div>\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n\n              {selectedUserId\n                ? ( <CurrentUser\n                  deleteUser={this.deleteUser}\n                  userId={selectedUserId}\n                />)\n                : 'No user selected'}\n            </div>\n          </div>\n\n        </div>\n        {hasLoadingError && <LoadingError />}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}